<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wannabe Notes]]></title>
  <link href="http://OopsMouse.github.io/atom.xml" rel="self"/>
  <link href="http://OopsMouse.github.io/"/>
  <updated>2013-11-18T21:45:46+09:00</updated>
  <id>http://OopsMouse.github.io/</id>
  <author>
    <name><![CDATA[Noda Shimpei]]></name>
    <email><![CDATA[noda.sin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSURLComponentsの使い方]]></title>
    <link href="http://OopsMouse.github.io/blog/2013/11/18/title/"/>
    <updated>2013-11-18T20:49:00+09:00</updated>
    <id>http://OopsMouse.github.io/blog/2013/11/18/title</id>
    <content type="html"><![CDATA[<p>iOS7からNSDateComponentsのように、NSURLのフォーマットを決めるNSURLComponentsというクラスが追加された。下記のようにURLを定義する部分がすっきりかける。</p>

<pre><code>NSURLComponents *urlComponents = [NSURLComponents new];
[urlComponents setScheme:@"https"];
[urlComponents setHost:@"www.google.com"];
[urlComponents setPath:@"/path"];
[urlComponents setQuery:@"query=vlue"];
</code></pre>

<p>が、どうもクエリーストリングを設定するところが、汚い。。。ので、すこし綺麗に書けるようにNSURLComponentsのカテゴリを作成した。</p>

<pre><code>@interface NSURLComponents (addon)

- (void)setQueryDictonary:(NSDictionary *)dict;

@end

@implementation NSURLComponents (addon)

- (void)setQueryDictonary:(NSDictionary *)dict {
    __block NSString *queryString = nil;
    [dict enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {
        if ([key isKindOfClass:[NSString class]] &amp;&amp; ![obj isKindOfClass:[NSNull class]]) {
            id value;
            if ([obj isKindOfClass:[NSString class]]) {
                value = obj;
            } else {
                value = [obj description];
            }

            if (value == nil) {
                return;
            }

            if (!queryString) {
                queryString = @"";
            } else {
                queryString = [queryString stringByAppendingString:@"&amp;"];
            }

            queryString = [queryString stringByAppendingString:[NSString stringWithFormat:@"%@=%@", key, value]];
        }
    }];
    [self setQuery:queryString];
}

@end
</code></pre>

<p>具体的な使い方は、下記のようになる。</p>

<pre><code>NSURLComponents *urlComponents = [NSURLComponents new];
[urlComponents setScheme:@"https"];
[urlComponents setHost:@"www.google.com"];
[urlComponents setPath:@"/path"];
[urlComponents setQueryDictonary:@{@"key1": @"value1", @"key2": @"value2"}];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-Cで、UniversalなStatic Libraryを作る方法]]></title>
    <link href="http://OopsMouse.github.io/blog/2013/11/15/title/"/>
    <updated>2013-11-15T14:24:00+09:00</updated>
    <id>http://OopsMouse.github.io/blog/2013/11/15/title</id>
    <content type="html"><![CDATA[<p>iPhone, iPadともに64bitのデバイスが登場し、既存の自作静的ライブラリも新しいアーキテクチャに対応しなければならない。Xcodeは、デフォルトで１つのアーキテクチャに対応したバイナリを吐き出す仕組みになっていて、対応したいアーキテクチャの数だけバイナリができてしまう。これらを１つのバイナリに集約させる方法はないのだろうか？と思って、調べたときのメモ。<br/>
Xcodeにlipoというコマンドがついていて、これを使うとユニバーサルなバイナリを作れるらしい。一応、ユニバーサルなバイナリを自動で吐き出してくれるようなスクリプトを書いた。</p>

<pre><code>#!/bin/sh

for project in *.xcodeproj; do
    if [ -e $project ]; then
        targetname="`basename $project .xcodeproj`"

        xcodebuild -project $project -configuration Release -sdk iphoneos -target $targetname clean build ARCHS="armv7" IPHONEOS_DEPLOYMENT_TARGET='4.3' TARGET_BUILD_DIR='./build-arm' BUILD_PRODUCT_DIR='./build-arm' &gt; /dev/null
        xcodebuild -project $project -configuration Release -sdk iphoneos -target $targetname clean build ARCHS="armv7s" IPHONEOS_DEPLOYMENT_TARGET='4.3' TARGET_BUILD_DIR='./build-armv7s' BUILD_PRODUCT_DIR='./build-armv7s' &gt; /dev/null
        xcodebuild -project $project -configuration Release -sdk iphoneos -target $targetname clean build ARCHS="arm64" IPHONEOS_DEPLOYMENT_TARGET='7.0' TARGET_BUILD_DIR='./build-arm64' BUILD_PRODUCT_DIR='./build-arm64' &gt; /dev/null
        xcodebuild -project $project -configuration Release -sdk iphonesimulator -target $targetname clean build ARCHS="i386" IPHONEOS_DEPLOYMENT_TARGET='4.3' TARGET_BUILD_DIR='./build-i386' BUILD_PRODUCT_DIR='./build-i386' &gt; /dev/null
        xcodebuild -project $project -configuration Release -sdk iphonesimulator -target $targetname clean build ARCHS="x86_64" VALID_ARCHS="armv7 armv7s arm64 i386 x86_64" IPHONEOS_DEPLOYMENT_TARGET='4.3' TARGET_BUILD_DIR='./build-x86_64' BUILD_PRODUCT_DIR='./build-x86_64' &gt; /dev/null
        lipo -create ./build-arm/$targetname.a ./build-armv7s/$targetname.a ./build-arm64/$targetname.a ./build-i386/$targetname.a ./build-x86_64/$targetname.a -output "${targetname}.a"
        xcrun -sdk iphoneos lipo -info $targetname.a

        rm -rf ./build-arm
        rm -rf ./build-armv7s
        rm -rf ./build-arm64
        rm -rf ./build-i386
        rm -rf ./build-x86_64

        if [ -e ./$targetname.a ]; then
            echo '** BUILD SUCCEEDED **'
        else
            echo '** BUILD FAILED **'
        fi
    fi
done
</code></pre>

<p>プロジェクトファイルがあるフォルダでこれを実行すると、同フォルダにユニバーサルなバイナリが吐き出される。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dyld: Symbol not found: __ZTISt9exceptionではまった]]></title>
    <link href="http://OopsMouse.github.io/blog/2013/11/14/title/"/>
    <updated>2013-11-14T20:59:00+09:00</updated>
    <id>http://OopsMouse.github.io/blog/2013/11/14/title</id>
    <content type="html"><![CDATA[<p>やっとこさアプリのios7対応をしようとしていたときにハマったことをメモ</p>

<p>今までxcode4.6.xで開発をしていたプロジェクトを新しいxcode5.0で開き、<br/>
Development Targetをios7にしてビルド。</p>

<p>UIのずれなどをios7上の実機で確認をしながら一通りの修正は終了し、<br/>
念のためios6でも変わらず使えるかな？っと確認しようとビルドしたら、エラーが！Σ(ﾟДﾟ|||)</p>

<pre><code>dyld: Symbol not found: __ZTISt9exception
  Referenced from: /var/mobile/Applications/86566E4B-B2E1-4691-BF65-2AE486EF247F/Sample.app/Sample
  Expected in: /usr/lib/libc++abi.dylib
  in /var/mobile/Applications/86566E4B-B2E1-4691-BF65-2AE486EF247F/Sample.app/Sample
</code></pre>

<p>「 直訳するとlibc++api.dylibで期待されて__ZTISt9exceptionってやつが見つからないよ！ 」って言っているんだけどさっぱり分からない。<br/>
調べても情報ないし、__ZTISt9exceptionがそもそも何のためのクラスなのか分からないし、どうしようもない。。。<br/>
だめもとで、frameworkのlibc++api.dylibの項目を<strong>optional</strong>に変更してビルドしたら、ios7でもios6でも動くようになった。 <br/>
これでいいのか？</p>
]]></content>
  </entry>
  
</feed>
